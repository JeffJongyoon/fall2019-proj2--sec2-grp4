getwd()
install.packages(ncdf4)
install.packages("ncdf4")
library(ncdf4)
ncfname <- "seaice_conc_monthly_icdr_nh_f18_201908_v01r00.nc"
# open a NetCDF file
ncin <- nc_open(ncfname)
print(ncin)
getwd()
setwd("/Users/changqu/Desktop/ADS/Project 2")
# open a NetCDF file
ncin <- nc_open(ncfname)
getwd()
ncname <- "cru10min30_tmp"
ncfname <- paste(ncname, ".nc", sep = "")
ncfname
ncfname <- "seaice_conc_monthly_icdr_sh_f18_201908_v01r00.nc"
# open a NetCDF file
ncin <- nc_open(ncfname)
print(ncin)
getwd
getwd()
knitr::opts_chunk$set(echo = TRUE)
tree_whole <- read.csv("2015_Street_Tree_Census_-_Tree_Data.csv")
library(tidyverse)
head(tree_whole)
# remove state island from the data
tree_whole %>% filter(zip_city != "Staten Island")
# remove state island from the data
tree_trunc <- tree_whole %>% filter(zip_city != "Staten Island")
# remove state island from the data
tree_manhattan <- tree_whole %>% filter(zip_city == "Manhattan")
# remove state island from the data
tree_manhattan <- tree_whole %>% filter(borough == "Manhattan")
getwd()
setwd("/Users/changqu/Documents/Github/fall2019--proj2--sec2-grp4")
setwd("/Users/changqu/Documents/Github/fall2019-proj2--sec2-grp4")
shiny::runApp('tree_app')
install.packages("leaflet")
runApp('tree_app')
runApp('tree_app')
load('../output/boroughs.RData')
getwd()
load('../output/boroughs.RData')
load('boroughs.RData')
load('/output/boroughs.RData')
load('./output/boroughs.RData')
load('./output/boroughs.RData')
View(trees)
levels(trees$spc_common)
levels(trees$status)
library(tidyverse)
trees %>% filter(status =='Dead')
levels(trees$health)
trees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
as.factor(.) %>%
levels(.)
trees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
as.factor(.)
trees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
as.factor(as.character(.))
trees %>%
filter(status == "Alive") %>%
select(spc_common)
trees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
as.factor(as.numeric(.))
?load
rees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
lapply(as.character)
trees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
lapply(as.character)
trees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
lapply(as.character) %>%
as.factor(.) %>%
levels(.)
species <- trees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
lapply(as.character)
species <- unlist(species)
species <- as.factor(species)
levels(species)
levels(species)[2:133]
# store species in a vector
species <- trees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
lapply(as.character) %>%
unlist(.) %>%
as.factor(.) %>%
levels(.)[2:133]
# store species in a vector
species <- trees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
lapply(as.character) %>%
unlist(.) %>%
as.factor(.)
View(trees)
View(trees)
levels(trees$sidewalk)
?checkboxInput
levels(trees$borough)
summary(trees$tree_dbh)
levels(trees$curb_loc)
runApp('tree_app')
runApp('tree_app')
load('./output/boroughs.RData')
# store species in a vector
species <- trees %>%
filter(status == "Alive") %>%
select(spc_common) %>%
lapply(as.character) %>%
unlist(.) %>%
as.factor(.)
species <- levels(species)
runApp('tree_app')
runApp('tree_app')
runApp('tree_app')
runApp('tree_app')
runApp('tree_app')
install.packages("leaflet")
install.packages("leaflet")
shiny::runApp('tree_app')
library(leaflet)
runApp('tree_app')
runApp('tree_app')
runApp('tree_app')
runApp('tree_app')
runApp('tree_app')
